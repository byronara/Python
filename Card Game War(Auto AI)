import random

def main():
    suits = ("Hearts", "Diamonds", "Spades", "Clubs")
    ranks = ( "Two", "Three", "Four", "Five", "Six","Seven",
                "Eight","Nine","Ten","Jack","Queen","King","Ace")
    values = {"Two":2, "Three":3, "Four":4, "Five":5, "Six":6,"Seven":7,
                "Eight":8,"Nine":9,"Ten":10,"Jack":11,"Queen":12,"King":13,"Ace":14}


    class Card: # A class of Card

        def __init__(self, suit, rank):
            self.suit = suit
            self.rank = rank
            self.value = values[self.rank] # It connect with the Values Dict to check the values

        def __str__(self):
            return self.rank + " of " + self.suit

    class Deck:

        def __init__(self):
            self.all_cards = []

            for rank in ranks:
                for suit in suits:
                    created_card = Card(suit,rank)
                    self.all_cards.append(created_card)

        def shuffle(self):
            random.shuffle(self.all_cards)
        
        def deal_one(self):
            return self.all_cards.pop()

    class Player:
        def __init__(self,name):
            self.name = name
            self.all_cards = []

        def remove_one(self):
            return self.all_cards.pop(0)

        def add_cards(self,new_cards):
            if type(new_cards) == type([]):
                return self.all_cards.extend(new_cards)
            else:
                return self.all_cards.append(new_cards)

        def __str__(self):
            return f"Player {self.name} has {len(self.all_cards)} cards"

     
    player1 = Player("John")
    player2 = Player("Takas")
    
    new_deck = Deck()
    new_deck.shuffle()

    
    # it give 2 cards per i turn
    for i in range(26): 
        player1.add_cards(new_deck.deal_one())
        player2.add_cards(new_deck.deal_one())

    print(player1.all_cards[1].value)
    game_on = True
    round_num = 0


    while game_on:
        round_num += 1
        print(f"Round {round_num}")
        if len(player1.all_cards) == 0:
            print(f"{player1.name} is out of cards!\n{player2.name} Wins")
            game_on = False
            break
        elif len(player2.all_cards) == 0:
            print(f"{player2.name} is out of cards!\n{player1.name} Wins")
            game_on = False
            break
        else:
            pass

        player1_cards = []
        player1_cards.append(player1.remove_one())
        player2_cards = []
        player2_cards.append(player2.remove_one())



        at_war = True
        while at_war:
            if player1_cards[-1].value > player2_cards[-1].value:
                player1.add_cards(player1_cards)
                player1.add_cards(player2_cards)
                at_war = False
            elif player2_cards[-1].value > player1_cards[-1].value:
                player2.add_cards(player2_cards)
                player2.add_cards(player1_cards)
                at_war = False
            else :
                print("At War!!!")
                if len(player1.all_cards) < 3:
                    print(f"{player1.name} unable to declare War\n{player2.name} Wins!!")
                    game_on = False
                    break
                elif len(player2.all_cards) < 3:
                    print(f"{player2.name} unable to declare War\n{player1.name} Wins!!")
                    game_on = False
                    break
                else:
                    for x in range(3):
                        player1_cards.append(player1.remove_one())
                        player2_cards.append(player2.remove_one())





main()
